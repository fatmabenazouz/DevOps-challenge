version: '3.8'

services:
  db:
    build:
      context: ./docker/postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fitness_network

  web:
    build:
      context: .
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./:/app
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-fitness_booking}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-5432}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@fitnessclasses.com}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    depends_on:
      - db
    networks:
      - fitness_network

  nginx:
    build:
      context: ./docker/nginx
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot_data:/var/www/certbot
      - ssl_certs:/etc/nginx/ssl
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - web
    networks:
      - fitness_network

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/var/www/certbot
      - ssl_certs:/etc/letsencrypt
    depends_on:
      - nginx
    command: renew
    networks:
      - fitness_network

networks:
  fitness_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
  certbot_data:
  ssl_certs:
  # caddy_data:
  # caddy_config:
